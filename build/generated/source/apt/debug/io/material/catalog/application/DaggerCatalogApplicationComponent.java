// Generated by Dagger (https://dagger.dev).
package io.material.catalog.application;

import android.app.Application;
import com.google.common.base.Optional;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import io.material.catalog.bottomappbar.BottomAppBarFragment;
import io.material.catalog.bottomappbar.BottomAppBarFragment_Module_ContributeInjector;
import io.material.catalog.bottomappbar.BottomAppBarFragment_Module_ProvideFeatureDemoFactory;
import io.material.catalog.bottomnav.BottomNavigationFragment;
import io.material.catalog.bottomnav.BottomNavigationFragment_Module_ContributeInjector;
import io.material.catalog.bottomnav.BottomNavigationFragment_Module_ProvideFeatureDemoFactory;
import io.material.catalog.bottomsheet.BottomSheetFragment;
import io.material.catalog.bottomsheet.BottomSheetFragment_Module_ContributeInjector;
import io.material.catalog.bottomsheet.BottomSheetFragment_Module_ProvideFeatureDemoFactory;
import io.material.catalog.button.ButtonsFragment;
import io.material.catalog.button.ButtonsFragment_Module_ContributeInjector;
import io.material.catalog.button.ButtonsFragment_Module_ProvideFeatureDemoFactory;
import io.material.catalog.card.CardFragment;
import io.material.catalog.card.CardFragment_Module_ContributeInjector;
import io.material.catalog.card.CardFragment_Module_ProvideFeatureDemoFactory;
import io.material.catalog.checkbox.CheckBoxFragment;
import io.material.catalog.checkbox.CheckBoxFragment_Module_ContributeInjector;
import io.material.catalog.checkbox.CheckBoxFragment_Module_ProvideFeatureDemoFactory;
import io.material.catalog.chip.ChipFragment;
import io.material.catalog.chip.ChipFragment_Module_ContributeInjector;
import io.material.catalog.chip.ChipFragment_Module_ProvideFeatureDemoFactory;
import io.material.catalog.datepicker.DatePickerDemoLandingFragment;
import io.material.catalog.datepicker.DatePickerDemoLandingFragment_Module_ContributeInjector;
import io.material.catalog.datepicker.DatePickerDemoLandingFragment_Module_ProvideFeatureDemoFactory;
import io.material.catalog.dialog.DialogDemoLandingFragment;
import io.material.catalog.dialog.DialogDemoLandingFragment_Module_ContributeInjector;
import io.material.catalog.dialog.DialogDemoLandingFragment_Module_ProvideFeatureDemoFactory;
import io.material.catalog.elevation.ElevationFragment;
import io.material.catalog.elevation.ElevationFragment_Module_ContributeInjector;
import io.material.catalog.elevation.ElevationFragment_Module_ProvideFeatureDemoFactory;
import io.material.catalog.fab.FabFragment;
import io.material.catalog.fab.FabFragment_Module_ContributeInjector;
import io.material.catalog.fab.FabFragment_Module_ProvideFeatureDemoFactory;
import io.material.catalog.feature.FeatureDemo;
import io.material.catalog.font.FontFragment;
import io.material.catalog.font.FontFragment_Module_ContributeInjector;
import io.material.catalog.font.FontFragment_Module_ProvideFeatureDemoFactory;
import io.material.catalog.main.MainActivity;
import io.material.catalog.main.MainActivity_MembersInjector;
import io.material.catalog.main.MainActivity_Module_ContributeMainActivity;
import io.material.catalog.menu.MenuFragment;
import io.material.catalog.menu.MenuFragment_Module_ContributeInjector;
import io.material.catalog.menu.MenuFragment_Module_ProvideFeatureDemoFactory;
import io.material.catalog.radiobutton.RadioButtonFragment;
import io.material.catalog.radiobutton.RadioButtonFragment_Module_ContributeInjector;
import io.material.catalog.radiobutton.RadioButtonFragment_Module_ProvideFeatureDemoFactory;
import io.material.catalog.shapetheming.ShapeThemingFragment;
import io.material.catalog.shapetheming.ShapeThemingFragment_Module_ContributeInjector;
import io.material.catalog.shapetheming.ShapeThemingFragment_Module_ProvideFeatureDemoFactory;
import io.material.catalog.slider.SliderFragment;
import io.material.catalog.slider.SliderFragment_Module_ContributeInjector;
import io.material.catalog.slider.SliderFragment_Module_ProvideFeatureDemoFactory;
import io.material.catalog.switchmaterial.SwitchFragment;
import io.material.catalog.switchmaterial.SwitchFragment_Module_ContributeInjector;
import io.material.catalog.switchmaterial.SwitchFragment_Module_ProvideFeatureDemoFactory;
import io.material.catalog.tableofcontents.TocFragment;
import io.material.catalog.tableofcontents.TocFragment_MembersInjector;
import io.material.catalog.tableofcontents.TocModule_ContributeThemeSwitcherDialogFragment;
import io.material.catalog.tableofcontents.TocModule_ContributeTocFragment;
import io.material.catalog.tableofcontents.TocModule_ProvideThemeSwitcherResourceProviderFactory;
import io.material.catalog.tableofcontents.TocModule_ProvideTocResourceProviderFactory;
import io.material.catalog.tabs.TabsFragment;
import io.material.catalog.tabs.TabsFragment_Module_ContributeInjector;
import io.material.catalog.tabs.TabsFragment_Module_ProvideFeatureDemoFactory;
import io.material.catalog.textfield.TextFieldFragment;
import io.material.catalog.textfield.TextFieldFragment_Module_ContributeInjector;
import io.material.catalog.textfield.TextFieldFragment_Module_ProvideFeatureDemoFactory;
import io.material.catalog.themeswitcher.ThemeSwitcherDialogFragment;
import io.material.catalog.themeswitcher.ThemeSwitcherDialogFragment_MembersInjector;
import io.material.catalog.topappbar.TopAppBarFragment;
import io.material.catalog.topappbar.TopAppBarFragment_Module_ContributeInjector;
import io.material.catalog.topappbar.TopAppBarFragment_Module_ProvideFeatureDemoFactory;
import io.material.catalog.transformation.TransformationFragment;
import io.material.catalog.transformation.TransformationFragment_Module_ContributeInjector;
import io.material.catalog.transformation.TransformationFragment_Module_ProvideFeatureDemoFactory;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

public final class DaggerCatalogApplicationComponent implements CatalogApplicationComponent {
  private Provider<MainActivity_Module_ContributeMainActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private DaggerCatalogApplicationComponent(Application application) {

    initialize(application);
  }

  public static CatalogApplicationComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return ImmutableMap.<Class<?>, Provider<AndroidInjector.Factory<?>>>of(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider);}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), ImmutableMap.<String, Provider<AndroidInjector.Factory<?>>>of());}

  @SuppressWarnings("unchecked")
  private void initialize(final Application application) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<MainActivity_Module_ContributeMainActivity.MainActivitySubcomponent.Factory>() {
      @Override
      public MainActivity_Module_ContributeMainActivity.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();}
    };
  }

  @Override
  public void inject(CatalogApplication app) {
    injectCatalogApplication(app);}

  @CanIgnoreReturnValue
  private CatalogApplication injectCatalogApplication(CatalogApplication instance) {
    CatalogApplication_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements CatalogApplicationComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public CatalogApplicationComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerCatalogApplicationComponent(application);
    }
  }

  private final class MainActivitySubcomponentFactory implements MainActivity_Module_ContributeMainActivity.MainActivitySubcomponent.Factory {
    @Override
    public MainActivity_Module_ContributeMainActivity.MainActivitySubcomponent create(
        MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements MainActivity_Module_ContributeMainActivity.MainActivitySubcomponent {
    private Provider<BottomAppBarFragment_Module_ContributeInjector.BottomAppBarFragmentSubcomponent.Factory> bottomAppBarFragmentSubcomponentFactoryProvider;

    private Provider<ButtonsFragment_Module_ContributeInjector.ButtonsFragmentSubcomponent.Factory> buttonsFragmentSubcomponentFactoryProvider;

    private Provider<BottomNavigationFragment_Module_ContributeInjector.BottomNavigationFragmentSubcomponent.Factory> bottomNavigationFragmentSubcomponentFactoryProvider;

    private Provider<BottomSheetFragment_Module_ContributeInjector.BottomSheetFragmentSubcomponent.Factory> bottomSheetFragmentSubcomponentFactoryProvider;

    private Provider<CardFragment_Module_ContributeInjector.CardFragmentSubcomponent.Factory> cardFragmentSubcomponentFactoryProvider;

    private Provider<CheckBoxFragment_Module_ContributeInjector.CheckBoxFragmentSubcomponent.Factory> checkBoxFragmentSubcomponentFactoryProvider;

    private Provider<ChipFragment_Module_ContributeInjector.ChipFragmentSubcomponent.Factory> chipFragmentSubcomponentFactoryProvider;

    private Provider<DialogDemoLandingFragment_Module_ContributeInjector.DialogDemoLandingFragmentSubcomponent.Factory> dialogDemoLandingFragmentSubcomponentFactoryProvider;

    private Provider<ElevationFragment_Module_ContributeInjector.ElevationFragmentSubcomponent.Factory> elevationFragmentSubcomponentFactoryProvider;

    private Provider<FabFragment_Module_ContributeInjector.FabFragmentSubcomponent.Factory> fabFragmentSubcomponentFactoryProvider;

    private Provider<FontFragment_Module_ContributeInjector.FontFragmentSubcomponent.Factory> fontFragmentSubcomponentFactoryProvider;

    private Provider<MenuFragment_Module_ContributeInjector.MenuFragmentSubcomponent.Factory> menuFragmentSubcomponentFactoryProvider;

    private Provider<DatePickerDemoLandingFragment_Module_ContributeInjector.DatePickerDemoLandingFragmentSubcomponent.Factory> datePickerDemoLandingFragmentSubcomponentFactoryProvider;

    private Provider<RadioButtonFragment_Module_ContributeInjector.RadioButtonFragmentSubcomponent.Factory> radioButtonFragmentSubcomponentFactoryProvider;

    private Provider<ShapeThemingFragment_Module_ContributeInjector.ShapeThemingFragmentSubcomponent.Factory> shapeThemingFragmentSubcomponentFactoryProvider;

    private Provider<SliderFragment_Module_ContributeInjector.SliderFragmentSubcomponent.Factory> sliderFragmentSubcomponentFactoryProvider;

    private Provider<SwitchFragment_Module_ContributeInjector.SwitchFragmentSubcomponent.Factory> switchFragmentSubcomponentFactoryProvider;

    private Provider<TabsFragment_Module_ContributeInjector.TabsFragmentSubcomponent.Factory> tabsFragmentSubcomponentFactoryProvider;

    private Provider<TextFieldFragment_Module_ContributeInjector.TextFieldFragmentSubcomponent.Factory> textFieldFragmentSubcomponentFactoryProvider;

    private Provider<TopAppBarFragment_Module_ContributeInjector.TopAppBarFragmentSubcomponent.Factory> topAppBarFragmentSubcomponentFactoryProvider;

    private Provider<TransformationFragment_Module_ContributeInjector.TransformationFragmentSubcomponent.Factory> transformationFragmentSubcomponentFactoryProvider;

    private Provider<TocModule_ContributeTocFragment.TocFragmentSubcomponent.Factory> tocFragmentSubcomponentFactoryProvider;

    private Provider<TocModule_ContributeThemeSwitcherDialogFragment.ThemeSwitcherDialogFragmentSubcomponent.Factory> themeSwitcherDialogFragmentSubcomponentFactoryProvider;

    private Provider<FeatureDemo> provideFeatureDemoProvider;

    private Provider<FeatureDemo> provideFeatureDemoProvider2;

    private Provider<FeatureDemo> provideFeatureDemoProvider3;

    private Provider<FeatureDemo> provideFeatureDemoProvider4;

    private Provider<FeatureDemo> provideFeatureDemoProvider5;

    private Provider<FeatureDemo> provideFeatureDemoProvider6;

    private Provider<FeatureDemo> provideFeatureDemoProvider7;

    private Provider<FeatureDemo> provideFeatureDemoProvider8;

    private Provider<FeatureDemo> provideFeatureDemoProvider9;

    private Provider<FeatureDemo> provideFeatureDemoProvider10;

    private Provider<FeatureDemo> provideFeatureDemoProvider11;

    private Provider<FeatureDemo> provideFeatureDemoProvider12;

    private Provider<FeatureDemo> provideFeatureDemoProvider13;

    private Provider<FeatureDemo> provideFeatureDemoProvider14;

    private Provider<FeatureDemo> provideFeatureDemoProvider15;

    private Provider<FeatureDemo> provideFeatureDemoProvider16;

    private Provider<FeatureDemo> provideFeatureDemoProvider17;

    private Provider<FeatureDemo> provideFeatureDemoProvider18;

    private Provider<FeatureDemo> provideFeatureDemoProvider19;

    private Provider<FeatureDemo> provideFeatureDemoProvider20;

    private Provider<FeatureDemo> provideFeatureDemoProvider21;

    private MainActivitySubcomponentImpl(MainActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return ImmutableMap.<Class<?>, Provider<AndroidInjector.Factory<?>>>builderWithExpectedSize(24).put(MainActivity.class, (Provider) DaggerCatalogApplicationComponent.this.mainActivitySubcomponentFactoryProvider).put(BottomAppBarFragment.class, (Provider) bottomAppBarFragmentSubcomponentFactoryProvider).put(ButtonsFragment.class, (Provider) buttonsFragmentSubcomponentFactoryProvider).put(BottomNavigationFragment.class, (Provider) bottomNavigationFragmentSubcomponentFactoryProvider).put(BottomSheetFragment.class, (Provider) bottomSheetFragmentSubcomponentFactoryProvider).put(CardFragment.class, (Provider) cardFragmentSubcomponentFactoryProvider).put(CheckBoxFragment.class, (Provider) checkBoxFragmentSubcomponentFactoryProvider).put(ChipFragment.class, (Provider) chipFragmentSubcomponentFactoryProvider).put(DialogDemoLandingFragment.class, (Provider) dialogDemoLandingFragmentSubcomponentFactoryProvider).put(ElevationFragment.class, (Provider) elevationFragmentSubcomponentFactoryProvider).put(FabFragment.class, (Provider) fabFragmentSubcomponentFactoryProvider).put(FontFragment.class, (Provider) fontFragmentSubcomponentFactoryProvider).put(MenuFragment.class, (Provider) menuFragmentSubcomponentFactoryProvider).put(DatePickerDemoLandingFragment.class, (Provider) datePickerDemoLandingFragmentSubcomponentFactoryProvider).put(RadioButtonFragment.class, (Provider) radioButtonFragmentSubcomponentFactoryProvider).put(ShapeThemingFragment.class, (Provider) shapeThemingFragmentSubcomponentFactoryProvider).put(SliderFragment.class, (Provider) sliderFragmentSubcomponentFactoryProvider).put(SwitchFragment.class, (Provider) switchFragmentSubcomponentFactoryProvider).put(TabsFragment.class, (Provider) tabsFragmentSubcomponentFactoryProvider).put(TextFieldFragment.class, (Provider) textFieldFragmentSubcomponentFactoryProvider).put(TopAppBarFragment.class, (Provider) topAppBarFragmentSubcomponentFactoryProvider).put(TransformationFragment.class, (Provider) transformationFragmentSubcomponentFactoryProvider).put(TocFragment.class, (Provider) tocFragmentSubcomponentFactoryProvider).put(ThemeSwitcherDialogFragment.class, (Provider) themeSwitcherDialogFragmentSubcomponentFactoryProvider).build();}

    private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), ImmutableMap.<String, Provider<AndroidInjector.Factory<?>>>of());}

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivity arg0) {
      this.bottomAppBarFragmentSubcomponentFactoryProvider = new Provider<BottomAppBarFragment_Module_ContributeInjector.BottomAppBarFragmentSubcomponent.Factory>() {
        @Override
        public BottomAppBarFragment_Module_ContributeInjector.BottomAppBarFragmentSubcomponent.Factory get(
            ) {
          return new BottomAppBarFragmentSubcomponentFactory();}
      };
      this.buttonsFragmentSubcomponentFactoryProvider = new Provider<ButtonsFragment_Module_ContributeInjector.ButtonsFragmentSubcomponent.Factory>() {
        @Override
        public ButtonsFragment_Module_ContributeInjector.ButtonsFragmentSubcomponent.Factory get() {
          return new ButtonsFragmentSubcomponentFactory();}
      };
      this.bottomNavigationFragmentSubcomponentFactoryProvider = new Provider<BottomNavigationFragment_Module_ContributeInjector.BottomNavigationFragmentSubcomponent.Factory>() {
        @Override
        public BottomNavigationFragment_Module_ContributeInjector.BottomNavigationFragmentSubcomponent.Factory get(
            ) {
          return new BottomNavigationFragmentSubcomponentFactory();}
      };
      this.bottomSheetFragmentSubcomponentFactoryProvider = new Provider<BottomSheetFragment_Module_ContributeInjector.BottomSheetFragmentSubcomponent.Factory>() {
        @Override
        public BottomSheetFragment_Module_ContributeInjector.BottomSheetFragmentSubcomponent.Factory get(
            ) {
          return new BottomSheetFragmentSubcomponentFactory();}
      };
      this.cardFragmentSubcomponentFactoryProvider = new Provider<CardFragment_Module_ContributeInjector.CardFragmentSubcomponent.Factory>() {
        @Override
        public CardFragment_Module_ContributeInjector.CardFragmentSubcomponent.Factory get() {
          return new CardFragmentSubcomponentFactory();}
      };
      this.checkBoxFragmentSubcomponentFactoryProvider = new Provider<CheckBoxFragment_Module_ContributeInjector.CheckBoxFragmentSubcomponent.Factory>() {
        @Override
        public CheckBoxFragment_Module_ContributeInjector.CheckBoxFragmentSubcomponent.Factory get(
            ) {
          return new CheckBoxFragmentSubcomponentFactory();}
      };
      this.chipFragmentSubcomponentFactoryProvider = new Provider<ChipFragment_Module_ContributeInjector.ChipFragmentSubcomponent.Factory>() {
        @Override
        public ChipFragment_Module_ContributeInjector.ChipFragmentSubcomponent.Factory get() {
          return new ChipFragmentSubcomponentFactory();}
      };
      this.dialogDemoLandingFragmentSubcomponentFactoryProvider = new Provider<DialogDemoLandingFragment_Module_ContributeInjector.DialogDemoLandingFragmentSubcomponent.Factory>() {
        @Override
        public DialogDemoLandingFragment_Module_ContributeInjector.DialogDemoLandingFragmentSubcomponent.Factory get(
            ) {
          return new DialogDemoLandingFragmentSubcomponentFactory();}
      };
      this.elevationFragmentSubcomponentFactoryProvider = new Provider<ElevationFragment_Module_ContributeInjector.ElevationFragmentSubcomponent.Factory>() {
        @Override
        public ElevationFragment_Module_ContributeInjector.ElevationFragmentSubcomponent.Factory get(
            ) {
          return new ElevationFragmentSubcomponentFactory();}
      };
      this.fabFragmentSubcomponentFactoryProvider = new Provider<FabFragment_Module_ContributeInjector.FabFragmentSubcomponent.Factory>() {
        @Override
        public FabFragment_Module_ContributeInjector.FabFragmentSubcomponent.Factory get() {
          return new FabFragmentSubcomponentFactory();}
      };
      this.fontFragmentSubcomponentFactoryProvider = new Provider<FontFragment_Module_ContributeInjector.FontFragmentSubcomponent.Factory>() {
        @Override
        public FontFragment_Module_ContributeInjector.FontFragmentSubcomponent.Factory get() {
          return new FontFragmentSubcomponentFactory();}
      };
      this.menuFragmentSubcomponentFactoryProvider = new Provider<MenuFragment_Module_ContributeInjector.MenuFragmentSubcomponent.Factory>() {
        @Override
        public MenuFragment_Module_ContributeInjector.MenuFragmentSubcomponent.Factory get() {
          return new MenuFragmentSubcomponentFactory();}
      };
      this.datePickerDemoLandingFragmentSubcomponentFactoryProvider = new Provider<DatePickerDemoLandingFragment_Module_ContributeInjector.DatePickerDemoLandingFragmentSubcomponent.Factory>() {
        @Override
        public DatePickerDemoLandingFragment_Module_ContributeInjector.DatePickerDemoLandingFragmentSubcomponent.Factory get(
            ) {
          return new DatePickerDemoLandingFragmentSubcomponentFactory();}
      };
      this.radioButtonFragmentSubcomponentFactoryProvider = new Provider<RadioButtonFragment_Module_ContributeInjector.RadioButtonFragmentSubcomponent.Factory>() {
        @Override
        public RadioButtonFragment_Module_ContributeInjector.RadioButtonFragmentSubcomponent.Factory get(
            ) {
          return new RadioButtonFragmentSubcomponentFactory();}
      };
      this.shapeThemingFragmentSubcomponentFactoryProvider = new Provider<ShapeThemingFragment_Module_ContributeInjector.ShapeThemingFragmentSubcomponent.Factory>() {
        @Override
        public ShapeThemingFragment_Module_ContributeInjector.ShapeThemingFragmentSubcomponent.Factory get(
            ) {
          return new ShapeThemingFragmentSubcomponentFactory();}
      };
      this.sliderFragmentSubcomponentFactoryProvider = new Provider<SliderFragment_Module_ContributeInjector.SliderFragmentSubcomponent.Factory>() {
        @Override
        public SliderFragment_Module_ContributeInjector.SliderFragmentSubcomponent.Factory get() {
          return new SliderFragmentSubcomponentFactory();}
      };
      this.switchFragmentSubcomponentFactoryProvider = new Provider<SwitchFragment_Module_ContributeInjector.SwitchFragmentSubcomponent.Factory>() {
        @Override
        public SwitchFragment_Module_ContributeInjector.SwitchFragmentSubcomponent.Factory get() {
          return new SwitchFragmentSubcomponentFactory();}
      };
      this.tabsFragmentSubcomponentFactoryProvider = new Provider<TabsFragment_Module_ContributeInjector.TabsFragmentSubcomponent.Factory>() {
        @Override
        public TabsFragment_Module_ContributeInjector.TabsFragmentSubcomponent.Factory get() {
          return new TabsFragmentSubcomponentFactory();}
      };
      this.textFieldFragmentSubcomponentFactoryProvider = new Provider<TextFieldFragment_Module_ContributeInjector.TextFieldFragmentSubcomponent.Factory>() {
        @Override
        public TextFieldFragment_Module_ContributeInjector.TextFieldFragmentSubcomponent.Factory get(
            ) {
          return new TextFieldFragmentSubcomponentFactory();}
      };
      this.topAppBarFragmentSubcomponentFactoryProvider = new Provider<TopAppBarFragment_Module_ContributeInjector.TopAppBarFragmentSubcomponent.Factory>() {
        @Override
        public TopAppBarFragment_Module_ContributeInjector.TopAppBarFragmentSubcomponent.Factory get(
            ) {
          return new TopAppBarFragmentSubcomponentFactory();}
      };
      this.transformationFragmentSubcomponentFactoryProvider = new Provider<TransformationFragment_Module_ContributeInjector.TransformationFragmentSubcomponent.Factory>() {
        @Override
        public TransformationFragment_Module_ContributeInjector.TransformationFragmentSubcomponent.Factory get(
            ) {
          return new TransformationFragmentSubcomponentFactory();}
      };
      this.tocFragmentSubcomponentFactoryProvider = new Provider<TocModule_ContributeTocFragment.TocFragmentSubcomponent.Factory>() {
        @Override
        public TocModule_ContributeTocFragment.TocFragmentSubcomponent.Factory get() {
          return new TocFragmentSubcomponentFactory();}
      };
      this.themeSwitcherDialogFragmentSubcomponentFactoryProvider = new Provider<TocModule_ContributeThemeSwitcherDialogFragment.ThemeSwitcherDialogFragmentSubcomponent.Factory>() {
        @Override
        public TocModule_ContributeThemeSwitcherDialogFragment.ThemeSwitcherDialogFragmentSubcomponent.Factory get(
            ) {
          return new ThemeSwitcherDialogFragmentSubcomponentFactory();}
      };
      this.provideFeatureDemoProvider = DoubleCheck.provider(BottomAppBarFragment_Module_ProvideFeatureDemoFactory.create());
      this.provideFeatureDemoProvider2 = DoubleCheck.provider(ButtonsFragment_Module_ProvideFeatureDemoFactory.create());
      this.provideFeatureDemoProvider3 = DoubleCheck.provider(BottomNavigationFragment_Module_ProvideFeatureDemoFactory.create());
      this.provideFeatureDemoProvider4 = DoubleCheck.provider(BottomSheetFragment_Module_ProvideFeatureDemoFactory.create());
      this.provideFeatureDemoProvider5 = DoubleCheck.provider(CardFragment_Module_ProvideFeatureDemoFactory.create());
      this.provideFeatureDemoProvider6 = DoubleCheck.provider(CheckBoxFragment_Module_ProvideFeatureDemoFactory.create());
      this.provideFeatureDemoProvider7 = DoubleCheck.provider(ChipFragment_Module_ProvideFeatureDemoFactory.create());
      this.provideFeatureDemoProvider8 = DoubleCheck.provider(DialogDemoLandingFragment_Module_ProvideFeatureDemoFactory.create());
      this.provideFeatureDemoProvider9 = DoubleCheck.provider(ElevationFragment_Module_ProvideFeatureDemoFactory.create());
      this.provideFeatureDemoProvider10 = DoubleCheck.provider(FabFragment_Module_ProvideFeatureDemoFactory.create());
      this.provideFeatureDemoProvider11 = DoubleCheck.provider(FontFragment_Module_ProvideFeatureDemoFactory.create());
      this.provideFeatureDemoProvider12 = DoubleCheck.provider(MenuFragment_Module_ProvideFeatureDemoFactory.create());
      this.provideFeatureDemoProvider13 = DoubleCheck.provider(DatePickerDemoLandingFragment_Module_ProvideFeatureDemoFactory.create());
      this.provideFeatureDemoProvider14 = DoubleCheck.provider(RadioButtonFragment_Module_ProvideFeatureDemoFactory.create());
      this.provideFeatureDemoProvider15 = DoubleCheck.provider(ShapeThemingFragment_Module_ProvideFeatureDemoFactory.create());
      this.provideFeatureDemoProvider16 = DoubleCheck.provider(SliderFragment_Module_ProvideFeatureDemoFactory.create());
      this.provideFeatureDemoProvider17 = DoubleCheck.provider(SwitchFragment_Module_ProvideFeatureDemoFactory.create());
      this.provideFeatureDemoProvider18 = DoubleCheck.provider(TabsFragment_Module_ProvideFeatureDemoFactory.create());
      this.provideFeatureDemoProvider19 = DoubleCheck.provider(TextFieldFragment_Module_ProvideFeatureDemoFactory.create());
      this.provideFeatureDemoProvider20 = DoubleCheck.provider(TopAppBarFragment_Module_ProvideFeatureDemoFactory.create());
      this.provideFeatureDemoProvider21 = DoubleCheck.provider(TransformationFragment_Module_ProvideFeatureDemoFactory.create());
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);}

    @CanIgnoreReturnValue
    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
      MainActivity_MembersInjector.injectInternalOptionsMenu(instance, Optional.absent());
      return instance;
    }

    private final class BottomAppBarFragmentSubcomponentFactory implements BottomAppBarFragment_Module_ContributeInjector.BottomAppBarFragmentSubcomponent.Factory {
      @Override
      public BottomAppBarFragment_Module_ContributeInjector.BottomAppBarFragmentSubcomponent create(
          BottomAppBarFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new BottomAppBarFragmentSubcomponentImpl(arg0);
      }
    }

    private final class BottomAppBarFragmentSubcomponentImpl implements BottomAppBarFragment_Module_ContributeInjector.BottomAppBarFragmentSubcomponent {
      private BottomAppBarFragmentSubcomponentImpl(BottomAppBarFragment arg0) {

      }

      @Override
      public void inject(BottomAppBarFragment arg0) {
        injectBottomAppBarFragment(arg0);}

      @CanIgnoreReturnValue
      private BottomAppBarFragment injectBottomAppBarFragment(BottomAppBarFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        return instance;
      }
    }

    private final class ButtonsFragmentSubcomponentFactory implements ButtonsFragment_Module_ContributeInjector.ButtonsFragmentSubcomponent.Factory {
      @Override
      public ButtonsFragment_Module_ContributeInjector.ButtonsFragmentSubcomponent create(
          ButtonsFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ButtonsFragmentSubcomponentImpl(arg0);
      }
    }

    private final class ButtonsFragmentSubcomponentImpl implements ButtonsFragment_Module_ContributeInjector.ButtonsFragmentSubcomponent {
      private ButtonsFragmentSubcomponentImpl(ButtonsFragment arg0) {

      }

      @Override
      public void inject(ButtonsFragment arg0) {
        injectButtonsFragment(arg0);}

      @CanIgnoreReturnValue
      private ButtonsFragment injectButtonsFragment(ButtonsFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        return instance;
      }
    }

    private final class BottomNavigationFragmentSubcomponentFactory implements BottomNavigationFragment_Module_ContributeInjector.BottomNavigationFragmentSubcomponent.Factory {
      @Override
      public BottomNavigationFragment_Module_ContributeInjector.BottomNavigationFragmentSubcomponent create(
          BottomNavigationFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new BottomNavigationFragmentSubcomponentImpl(arg0);
      }
    }

    private final class BottomNavigationFragmentSubcomponentImpl implements BottomNavigationFragment_Module_ContributeInjector.BottomNavigationFragmentSubcomponent {
      private BottomNavigationFragmentSubcomponentImpl(BottomNavigationFragment arg0) {

      }

      @Override
      public void inject(BottomNavigationFragment arg0) {
        injectBottomNavigationFragment(arg0);}

      @CanIgnoreReturnValue
      private BottomNavigationFragment injectBottomNavigationFragment(
          BottomNavigationFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        return instance;
      }
    }

    private final class BottomSheetFragmentSubcomponentFactory implements BottomSheetFragment_Module_ContributeInjector.BottomSheetFragmentSubcomponent.Factory {
      @Override
      public BottomSheetFragment_Module_ContributeInjector.BottomSheetFragmentSubcomponent create(
          BottomSheetFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new BottomSheetFragmentSubcomponentImpl(arg0);
      }
    }

    private final class BottomSheetFragmentSubcomponentImpl implements BottomSheetFragment_Module_ContributeInjector.BottomSheetFragmentSubcomponent {
      private BottomSheetFragmentSubcomponentImpl(BottomSheetFragment arg0) {

      }

      @Override
      public void inject(BottomSheetFragment arg0) {
        injectBottomSheetFragment(arg0);}

      @CanIgnoreReturnValue
      private BottomSheetFragment injectBottomSheetFragment(BottomSheetFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        return instance;
      }
    }

    private final class CardFragmentSubcomponentFactory implements CardFragment_Module_ContributeInjector.CardFragmentSubcomponent.Factory {
      @Override
      public CardFragment_Module_ContributeInjector.CardFragmentSubcomponent create(
          CardFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new CardFragmentSubcomponentImpl(arg0);
      }
    }

    private final class CardFragmentSubcomponentImpl implements CardFragment_Module_ContributeInjector.CardFragmentSubcomponent {
      private CardFragmentSubcomponentImpl(CardFragment arg0) {

      }

      @Override
      public void inject(CardFragment arg0) {
        injectCardFragment(arg0);}

      @CanIgnoreReturnValue
      private CardFragment injectCardFragment(CardFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        return instance;
      }
    }

    private final class CheckBoxFragmentSubcomponentFactory implements CheckBoxFragment_Module_ContributeInjector.CheckBoxFragmentSubcomponent.Factory {
      @Override
      public CheckBoxFragment_Module_ContributeInjector.CheckBoxFragmentSubcomponent create(
          CheckBoxFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new CheckBoxFragmentSubcomponentImpl(arg0);
      }
    }

    private final class CheckBoxFragmentSubcomponentImpl implements CheckBoxFragment_Module_ContributeInjector.CheckBoxFragmentSubcomponent {
      private CheckBoxFragmentSubcomponentImpl(CheckBoxFragment arg0) {

      }

      @Override
      public void inject(CheckBoxFragment arg0) {
        injectCheckBoxFragment(arg0);}

      @CanIgnoreReturnValue
      private CheckBoxFragment injectCheckBoxFragment(CheckBoxFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        return instance;
      }
    }

    private final class ChipFragmentSubcomponentFactory implements ChipFragment_Module_ContributeInjector.ChipFragmentSubcomponent.Factory {
      @Override
      public ChipFragment_Module_ContributeInjector.ChipFragmentSubcomponent create(
          ChipFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ChipFragmentSubcomponentImpl(arg0);
      }
    }

    private final class ChipFragmentSubcomponentImpl implements ChipFragment_Module_ContributeInjector.ChipFragmentSubcomponent {
      private ChipFragmentSubcomponentImpl(ChipFragment arg0) {

      }

      @Override
      public void inject(ChipFragment arg0) {
        injectChipFragment(arg0);}

      @CanIgnoreReturnValue
      private ChipFragment injectChipFragment(ChipFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        return instance;
      }
    }

    private final class DialogDemoLandingFragmentSubcomponentFactory implements DialogDemoLandingFragment_Module_ContributeInjector.DialogDemoLandingFragmentSubcomponent.Factory {
      @Override
      public DialogDemoLandingFragment_Module_ContributeInjector.DialogDemoLandingFragmentSubcomponent create(
          DialogDemoLandingFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new DialogDemoLandingFragmentSubcomponentImpl(arg0);
      }
    }

    private final class DialogDemoLandingFragmentSubcomponentImpl implements DialogDemoLandingFragment_Module_ContributeInjector.DialogDemoLandingFragmentSubcomponent {
      private DialogDemoLandingFragmentSubcomponentImpl(DialogDemoLandingFragment arg0) {

      }

      @Override
      public void inject(DialogDemoLandingFragment arg0) {
        injectDialogDemoLandingFragment(arg0);}

      @CanIgnoreReturnValue
      private DialogDemoLandingFragment injectDialogDemoLandingFragment(
          DialogDemoLandingFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        return instance;
      }
    }

    private final class ElevationFragmentSubcomponentFactory implements ElevationFragment_Module_ContributeInjector.ElevationFragmentSubcomponent.Factory {
      @Override
      public ElevationFragment_Module_ContributeInjector.ElevationFragmentSubcomponent create(
          ElevationFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ElevationFragmentSubcomponentImpl(arg0);
      }
    }

    private final class ElevationFragmentSubcomponentImpl implements ElevationFragment_Module_ContributeInjector.ElevationFragmentSubcomponent {
      private ElevationFragmentSubcomponentImpl(ElevationFragment arg0) {

      }

      @Override
      public void inject(ElevationFragment arg0) {
        injectElevationFragment(arg0);}

      @CanIgnoreReturnValue
      private ElevationFragment injectElevationFragment(ElevationFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        return instance;
      }
    }

    private final class FabFragmentSubcomponentFactory implements FabFragment_Module_ContributeInjector.FabFragmentSubcomponent.Factory {
      @Override
      public FabFragment_Module_ContributeInjector.FabFragmentSubcomponent create(
          FabFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new FabFragmentSubcomponentImpl(arg0);
      }
    }

    private final class FabFragmentSubcomponentImpl implements FabFragment_Module_ContributeInjector.FabFragmentSubcomponent {
      private FabFragmentSubcomponentImpl(FabFragment arg0) {

      }

      @Override
      public void inject(FabFragment arg0) {
        injectFabFragment(arg0);}

      @CanIgnoreReturnValue
      private FabFragment injectFabFragment(FabFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        return instance;
      }
    }

    private final class FontFragmentSubcomponentFactory implements FontFragment_Module_ContributeInjector.FontFragmentSubcomponent.Factory {
      @Override
      public FontFragment_Module_ContributeInjector.FontFragmentSubcomponent create(
          FontFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new FontFragmentSubcomponentImpl(arg0);
      }
    }

    private final class FontFragmentSubcomponentImpl implements FontFragment_Module_ContributeInjector.FontFragmentSubcomponent {
      private FontFragmentSubcomponentImpl(FontFragment arg0) {

      }

      @Override
      public void inject(FontFragment arg0) {
        injectFontFragment(arg0);}

      @CanIgnoreReturnValue
      private FontFragment injectFontFragment(FontFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        return instance;
      }
    }

    private final class MenuFragmentSubcomponentFactory implements MenuFragment_Module_ContributeInjector.MenuFragmentSubcomponent.Factory {
      @Override
      public MenuFragment_Module_ContributeInjector.MenuFragmentSubcomponent create(
          MenuFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new MenuFragmentSubcomponentImpl(arg0);
      }
    }

    private final class MenuFragmentSubcomponentImpl implements MenuFragment_Module_ContributeInjector.MenuFragmentSubcomponent {
      private MenuFragmentSubcomponentImpl(MenuFragment arg0) {

      }

      @Override
      public void inject(MenuFragment arg0) {
        injectMenuFragment(arg0);}

      @CanIgnoreReturnValue
      private MenuFragment injectMenuFragment(MenuFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        return instance;
      }
    }

    private final class DatePickerDemoLandingFragmentSubcomponentFactory implements DatePickerDemoLandingFragment_Module_ContributeInjector.DatePickerDemoLandingFragmentSubcomponent.Factory {
      @Override
      public DatePickerDemoLandingFragment_Module_ContributeInjector.DatePickerDemoLandingFragmentSubcomponent create(
          DatePickerDemoLandingFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new DatePickerDemoLandingFragmentSubcomponentImpl(arg0);
      }
    }

    private final class DatePickerDemoLandingFragmentSubcomponentImpl implements DatePickerDemoLandingFragment_Module_ContributeInjector.DatePickerDemoLandingFragmentSubcomponent {
      private DatePickerDemoLandingFragmentSubcomponentImpl(DatePickerDemoLandingFragment arg0) {

      }

      @Override
      public void inject(DatePickerDemoLandingFragment arg0) {
        injectDatePickerDemoLandingFragment(arg0);}

      @CanIgnoreReturnValue
      private DatePickerDemoLandingFragment injectDatePickerDemoLandingFragment(
          DatePickerDemoLandingFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        return instance;
      }
    }

    private final class RadioButtonFragmentSubcomponentFactory implements RadioButtonFragment_Module_ContributeInjector.RadioButtonFragmentSubcomponent.Factory {
      @Override
      public RadioButtonFragment_Module_ContributeInjector.RadioButtonFragmentSubcomponent create(
          RadioButtonFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new RadioButtonFragmentSubcomponentImpl(arg0);
      }
    }

    private final class RadioButtonFragmentSubcomponentImpl implements RadioButtonFragment_Module_ContributeInjector.RadioButtonFragmentSubcomponent {
      private RadioButtonFragmentSubcomponentImpl(RadioButtonFragment arg0) {

      }

      @Override
      public void inject(RadioButtonFragment arg0) {
        injectRadioButtonFragment(arg0);}

      @CanIgnoreReturnValue
      private RadioButtonFragment injectRadioButtonFragment(RadioButtonFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        return instance;
      }
    }

    private final class ShapeThemingFragmentSubcomponentFactory implements ShapeThemingFragment_Module_ContributeInjector.ShapeThemingFragmentSubcomponent.Factory {
      @Override
      public ShapeThemingFragment_Module_ContributeInjector.ShapeThemingFragmentSubcomponent create(
          ShapeThemingFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ShapeThemingFragmentSubcomponentImpl(arg0);
      }
    }

    private final class ShapeThemingFragmentSubcomponentImpl implements ShapeThemingFragment_Module_ContributeInjector.ShapeThemingFragmentSubcomponent {
      private ShapeThemingFragmentSubcomponentImpl(ShapeThemingFragment arg0) {

      }

      @Override
      public void inject(ShapeThemingFragment arg0) {
        injectShapeThemingFragment(arg0);}

      @CanIgnoreReturnValue
      private ShapeThemingFragment injectShapeThemingFragment(ShapeThemingFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        return instance;
      }
    }

    private final class SliderFragmentSubcomponentFactory implements SliderFragment_Module_ContributeInjector.SliderFragmentSubcomponent.Factory {
      @Override
      public SliderFragment_Module_ContributeInjector.SliderFragmentSubcomponent create(
          SliderFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SliderFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SliderFragmentSubcomponentImpl implements SliderFragment_Module_ContributeInjector.SliderFragmentSubcomponent {
      private SliderFragmentSubcomponentImpl(SliderFragment arg0) {

      }

      @Override
      public void inject(SliderFragment arg0) {
        injectSliderFragment(arg0);}

      @CanIgnoreReturnValue
      private SliderFragment injectSliderFragment(SliderFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        return instance;
      }
    }

    private final class SwitchFragmentSubcomponentFactory implements SwitchFragment_Module_ContributeInjector.SwitchFragmentSubcomponent.Factory {
      @Override
      public SwitchFragment_Module_ContributeInjector.SwitchFragmentSubcomponent create(
          SwitchFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SwitchFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SwitchFragmentSubcomponentImpl implements SwitchFragment_Module_ContributeInjector.SwitchFragmentSubcomponent {
      private SwitchFragmentSubcomponentImpl(SwitchFragment arg0) {

      }

      @Override
      public void inject(SwitchFragment arg0) {
        injectSwitchFragment(arg0);}

      @CanIgnoreReturnValue
      private SwitchFragment injectSwitchFragment(SwitchFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        return instance;
      }
    }

    private final class TabsFragmentSubcomponentFactory implements TabsFragment_Module_ContributeInjector.TabsFragmentSubcomponent.Factory {
      @Override
      public TabsFragment_Module_ContributeInjector.TabsFragmentSubcomponent create(
          TabsFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new TabsFragmentSubcomponentImpl(arg0);
      }
    }

    private final class TabsFragmentSubcomponentImpl implements TabsFragment_Module_ContributeInjector.TabsFragmentSubcomponent {
      private TabsFragmentSubcomponentImpl(TabsFragment arg0) {

      }

      @Override
      public void inject(TabsFragment arg0) {
        injectTabsFragment(arg0);}

      @CanIgnoreReturnValue
      private TabsFragment injectTabsFragment(TabsFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        return instance;
      }
    }

    private final class TextFieldFragmentSubcomponentFactory implements TextFieldFragment_Module_ContributeInjector.TextFieldFragmentSubcomponent.Factory {
      @Override
      public TextFieldFragment_Module_ContributeInjector.TextFieldFragmentSubcomponent create(
          TextFieldFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new TextFieldFragmentSubcomponentImpl(arg0);
      }
    }

    private final class TextFieldFragmentSubcomponentImpl implements TextFieldFragment_Module_ContributeInjector.TextFieldFragmentSubcomponent {
      private TextFieldFragmentSubcomponentImpl(TextFieldFragment arg0) {

      }

      @Override
      public void inject(TextFieldFragment arg0) {
        injectTextFieldFragment(arg0);}

      @CanIgnoreReturnValue
      private TextFieldFragment injectTextFieldFragment(TextFieldFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        return instance;
      }
    }

    private final class TopAppBarFragmentSubcomponentFactory implements TopAppBarFragment_Module_ContributeInjector.TopAppBarFragmentSubcomponent.Factory {
      @Override
      public TopAppBarFragment_Module_ContributeInjector.TopAppBarFragmentSubcomponent create(
          TopAppBarFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new TopAppBarFragmentSubcomponentImpl(arg0);
      }
    }

    private final class TopAppBarFragmentSubcomponentImpl implements TopAppBarFragment_Module_ContributeInjector.TopAppBarFragmentSubcomponent {
      private TopAppBarFragmentSubcomponentImpl(TopAppBarFragment arg0) {

      }

      @Override
      public void inject(TopAppBarFragment arg0) {
        injectTopAppBarFragment(arg0);}

      @CanIgnoreReturnValue
      private TopAppBarFragment injectTopAppBarFragment(TopAppBarFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        return instance;
      }
    }

    private final class TransformationFragmentSubcomponentFactory implements TransformationFragment_Module_ContributeInjector.TransformationFragmentSubcomponent.Factory {
      @Override
      public TransformationFragment_Module_ContributeInjector.TransformationFragmentSubcomponent create(
          TransformationFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new TransformationFragmentSubcomponentImpl(arg0);
      }
    }

    private final class TransformationFragmentSubcomponentImpl implements TransformationFragment_Module_ContributeInjector.TransformationFragmentSubcomponent {
      private TransformationFragmentSubcomponentImpl(TransformationFragment arg0) {

      }

      @Override
      public void inject(TransformationFragment arg0) {
        injectTransformationFragment(arg0);}

      @CanIgnoreReturnValue
      private TransformationFragment injectTransformationFragment(TransformationFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        return instance;
      }
    }

    private final class TocFragmentSubcomponentFactory implements TocModule_ContributeTocFragment.TocFragmentSubcomponent.Factory {
      @Override
      public TocModule_ContributeTocFragment.TocFragmentSubcomponent create(TocFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new TocFragmentSubcomponentImpl(arg0);
      }
    }

    private final class TocFragmentSubcomponentImpl implements TocModule_ContributeTocFragment.TocFragmentSubcomponent {
      private TocFragmentSubcomponentImpl(TocFragment arg0) {

      }

      private Set<FeatureDemo> getSetOfFeatureDemo() {
        return ImmutableSet.<FeatureDemo>of(MainActivitySubcomponentImpl.this.provideFeatureDemoProvider.get(), MainActivitySubcomponentImpl.this.provideFeatureDemoProvider2.get(), MainActivitySubcomponentImpl.this.provideFeatureDemoProvider3.get(), MainActivitySubcomponentImpl.this.provideFeatureDemoProvider4.get(), MainActivitySubcomponentImpl.this.provideFeatureDemoProvider5.get(), MainActivitySubcomponentImpl.this.provideFeatureDemoProvider6.get(), MainActivitySubcomponentImpl.this.provideFeatureDemoProvider7.get(), MainActivitySubcomponentImpl.this.provideFeatureDemoProvider8.get(), MainActivitySubcomponentImpl.this.provideFeatureDemoProvider9.get(), MainActivitySubcomponentImpl.this.provideFeatureDemoProvider10.get(), MainActivitySubcomponentImpl.this.provideFeatureDemoProvider11.get(), MainActivitySubcomponentImpl.this.provideFeatureDemoProvider12.get(), MainActivitySubcomponentImpl.this.provideFeatureDemoProvider13.get(), MainActivitySubcomponentImpl.this.provideFeatureDemoProvider14.get(), MainActivitySubcomponentImpl.this.provideFeatureDemoProvider15.get(), MainActivitySubcomponentImpl.this.provideFeatureDemoProvider16.get(), MainActivitySubcomponentImpl.this.provideFeatureDemoProvider17.get(), MainActivitySubcomponentImpl.this.provideFeatureDemoProvider18.get(), MainActivitySubcomponentImpl.this.provideFeatureDemoProvider19.get(), MainActivitySubcomponentImpl.this.provideFeatureDemoProvider20.get(), MainActivitySubcomponentImpl.this.provideFeatureDemoProvider21.get());}

      @Override
      public void inject(TocFragment arg0) {
        injectTocFragment(arg0);}

      @CanIgnoreReturnValue
      private TocFragment injectTocFragment(TocFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        TocFragment_MembersInjector.injectFeatureDemos(instance, getSetOfFeatureDemo());
        TocFragment_MembersInjector.injectTocResourceProvider(instance, TocModule_ProvideTocResourceProviderFactory.provideTocResourceProvider());
        TocFragment_MembersInjector.injectThemeSwitcherResourceProvider(instance, TocModule_ProvideThemeSwitcherResourceProviderFactory.provideThemeSwitcherResourceProvider());
        return instance;
      }
    }

    private final class ThemeSwitcherDialogFragmentSubcomponentFactory implements TocModule_ContributeThemeSwitcherDialogFragment.ThemeSwitcherDialogFragmentSubcomponent.Factory {
      @Override
      public TocModule_ContributeThemeSwitcherDialogFragment.ThemeSwitcherDialogFragmentSubcomponent create(
          ThemeSwitcherDialogFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ThemeSwitcherDialogFragmentSubcomponentImpl(arg0);
      }
    }

    private final class ThemeSwitcherDialogFragmentSubcomponentImpl implements TocModule_ContributeThemeSwitcherDialogFragment.ThemeSwitcherDialogFragmentSubcomponent {
      private ThemeSwitcherDialogFragmentSubcomponentImpl(ThemeSwitcherDialogFragment arg0) {

      }

      @Override
      public void inject(ThemeSwitcherDialogFragment arg0) {
        injectThemeSwitcherDialogFragment(arg0);}

      @CanIgnoreReturnValue
      private ThemeSwitcherDialogFragment injectThemeSwitcherDialogFragment(
          ThemeSwitcherDialogFragment instance) {
        ThemeSwitcherDialogFragment_MembersInjector.injectResourceProvider(instance, TocModule_ProvideThemeSwitcherResourceProviderFactory.provideThemeSwitcherResourceProvider());
        ThemeSwitcherDialogFragment_MembersInjector.injectChildFragmentInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        return instance;
      }
    }
  }
}
